#include <Servo.h>
Servo miServo;

const int motorA = 12;
const byte velocidadA = 3;
const int frenoA = 9;
const int pinObstaculo1 = 2;
const int pinObstaculo2 = 4;

// Pins for Sensor 1
const int trigPin1 = 4;
const int echoPin1 = 2;

// Pins for Sensor 2
const int trigPin2 = 13;
const int echoPin2 = 11;

// Start pins
const int pinInicio1 = 48;
const int pinInicio2 = 52;

// Distance limits in cm
const int distanciaMax = 53;
const int distanciaMin = 43;

// Function to measure distance using an ultrasonic sensor
long medirDistancia(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duracion = pulseIn(echoPin, HIGH); // Measure the duration of the HIGH signal
  long distancia = duracion * 0.034 / 2;  // Convert duration to distance in cm
  return distancia;
}

void setup() {
  // Setup for the servo and motors
  Serial.begin(9600);
  pinMode(motorA, OUTPUT);
  pinMode(velocidadA, OUTPUT);
  pinMode(frenoA, OUTPUT);
  miServo.attach(5);  // Connect the servo to pin 5
  miServo.write(122); // Set the servo to 122 degrees before starting

  // Setup pins for sensors
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);

  // Configure start pins as input
  pinMode(pinInicio1, INPUT);
  pinMode(pinInicio2, INPUT);
  pinMode(44, INPUT);

  // Wait until both start pins receive pulses at the same time
  Serial.println("Waiting for pulses on start pins...");
  while (!(digitalRead(pinInicio1) == HIGH && digitalRead(pinInicio2) == HIGH)) {
    Serial.print("Pin 48: ");
    Serial.print(digitalRead(pinInicio1));
    Serial.print(" | Pin 52: ");
    Serial.println(digitalRead(pinInicio2));
    delay(10);  // Small delay to avoid saturating the Serial Monitor
  }
  Serial.println("Start pulses received. Starting program...");
}

void loop() {
  // Check if pin 48 has received a pulse
  if (digitalRead(44) == HIGH) {
    Serial.println("Pulse received on pin 44. Ending program.");

    // Stop movement and servo
    digitalWrite(motorA, LOW);
    digitalWrite(frenoA, HIGH);  // Activate brake
    analogWrite(velocidadA, 0);  // Set speed to 0
    miServo.detach();  // Stop the servo
    
    while (true);  // Halt the program
  }

  // Measure distance for Sensor 1
  long distancia1 = medirDistancia(trigPin1, echoPin1);
  
  // Measure distance for Sensor 2
  long distancia2 = medirDistancia(trigPin2, echoPin2);

  // Display distances in the Serial Monitor
  Serial.print("Distance Sensor 1: ");
  Serial.print(distancia1);
  Serial.println(" cm");

  Serial.print("Distance Sensor 2: ");
  Serial.print(distancia2);
  Serial.println(" cm");

  // Logic for Sensor 1
  if (distancia1 >= distanciaMax) {
    Serial.println("Avoiding obstacle");
    digitalWrite(motorA, HIGH);
    digitalWrite(frenoA, LOW);
    analogWrite(velocidadA, 150);
    miServo.write(134);  // Turn the servo to the right
  } else if (distancia1 <= distanciaMin) {
    Serial.println("Avoiding obstacle");
    miServo.write(104);  // Turn the servo to the left
    digitalWrite(motorA, HIGH);
    digitalWrite(frenoA, LOW);
    analogWrite(velocidadA, 150);
  } else {
    miServo.write(122);  // Set the servo to neutral position
    digitalWrite(motorA, HIGH);
    digitalWrite(frenoA, LOW);
    analogWrite(velocidadA, 150);
  }

  // Logic for Sensor 2
  if (distancia2 >= distanciaMax) {
    Serial.println("Avoiding obstacle");
    miServo.write(104);  // Turn the servo to the left
    digitalWrite(motorA, HIGH);
    digitalWrite(frenoA, LOW);
    analogWrite(velocidadA, 150);
  } else if (distancia2 <= distanciaMin) {
    Serial.println("Avoiding obstacle");
    digitalWrite(motorA, HIGH);
    digitalWrite(frenoA, LOW);
    analogWrite(velocidadA, 150);
    miServo.write(134);  // Turn the servo to the right
  } else {
    miServo.write(122);  // Set the servo to neutral position
    digitalWrite(motorA, HIGH);
    digitalWrite(frenoA, LOW);
    analogWrite(velocidadA, 150);
  }

  delay(100); // Reduced delay to improve detection speed
}
